# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [published]  # Changed from 'created' to 'published'

jobs:
  deploy:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pygmm
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0  # Fetch full history for proper version detection
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
    - name: Set up Python
      run: uv python install
    - name: Install package with dependencies
      run: uv sync --all-extras
    - name: Validate version for PyPI
      run: |
        # Get the version from git tags/setuptools_scm without importing
        VERSION=$(uv run python -c "from setuptools_scm import get_version; print(get_version())")
        echo "Detected version: $VERSION"

        # Check if version contains local identifier (+ character)
        if [[ "$VERSION" == *"+"* ]]; then
          echo "ERROR: Version '$VERSION' contains local identifier and cannot be uploaded to PyPI"
          echo "Please create a proper release tag without local version identifiers"
          exit 1
        fi

        # Check if this is a development version
        if [[ "$VERSION" == *"dev"* ]]; then
          echo "WARNING: This appears to be a development version: $VERSION"
          echo "Consider creating a proper release tag"
        fi

        echo "Version validation passed: $VERSION"
    - name: Build
      run: uv build
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.12.4
